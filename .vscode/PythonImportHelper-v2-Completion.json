[
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QScrollArea",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QScrollArea",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QScrollArea",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QScrollArea",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtgraph",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "PlotWidget",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "PlotWidget",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "PlotWidget",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "PlotWidget",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TelemetryClient",
        "importPath": "telemetry_client",
        "description": "telemetry_client",
        "isExtraImport": true,
        "detail": "telemetry_client",
        "documentation": {}
    },
    {
        "label": "TelemetryClient",
        "importPath": "telemetry_client",
        "description": "telemetry_client",
        "isExtraImport": true,
        "detail": "telemetry_client",
        "documentation": {}
    },
    {
        "label": "log_types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "log_types",
        "description": "log_types",
        "detail": "log_types",
        "documentation": {}
    },
    {
        "label": "log_block_t",
        "importPath": "log_types",
        "description": "log_types",
        "isExtraImport": true,
        "detail": "log_types",
        "documentation": {}
    },
    {
        "label": "log_block_t",
        "importPath": "log_types",
        "description": "log_types",
        "isExtraImport": true,
        "detail": "log_types",
        "documentation": {}
    },
    {
        "label": "log_block_data_control_loop_t",
        "importPath": "log_types",
        "description": "log_types",
        "isExtraImport": true,
        "detail": "log_types",
        "documentation": {}
    },
    {
        "label": "log_block_header_t",
        "importPath": "log_types",
        "description": "log_types",
        "isExtraImport": true,
        "detail": "log_types",
        "documentation": {}
    },
    {
        "label": "log_type_t",
        "importPath": "log_types",
        "description": "log_types",
        "isExtraImport": true,
        "detail": "log_types",
        "documentation": {}
    },
    {
        "label": "log_block_data_control_loop_t",
        "importPath": "log_types",
        "description": "log_types",
        "isExtraImport": true,
        "detail": "log_types",
        "documentation": {}
    },
    {
        "label": "log_block_header_t",
        "importPath": "log_types",
        "description": "log_types",
        "isExtraImport": true,
        "detail": "log_types",
        "documentation": {}
    },
    {
        "label": "log_type_t",
        "importPath": "log_types",
        "description": "log_types",
        "isExtraImport": true,
        "detail": "log_types",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "TelemetryClientLogger",
        "importPath": "telemetry_client_logger",
        "description": "telemetry_client_logger",
        "isExtraImport": true,
        "detail": "telemetry_client_logger",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Serial",
        "importPath": "serial",
        "description": "serial",
        "isExtraImport": true,
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "Serial",
        "importPath": "serial",
        "description": "serial",
        "isExtraImport": true,
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "SerialTimeoutException",
        "importPath": "serial",
        "description": "serial",
        "isExtraImport": true,
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "Serial",
        "importPath": "serial",
        "description": "serial",
        "isExtraImport": true,
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "Serial",
        "importPath": "serial",
        "description": "serial",
        "isExtraImport": true,
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "Serial",
        "importPath": "serial",
        "description": "serial",
        "isExtraImport": true,
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "SerialException",
        "importPath": "serial.serialutil",
        "description": "serial.serialutil",
        "isExtraImport": true,
        "detail": "serial.serialutil",
        "documentation": {}
    },
    {
        "label": "SerialException",
        "importPath": "serial.serialutil",
        "description": "serial.serialutil",
        "isExtraImport": true,
        "detail": "serial.serialutil",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "MSP_Client_Serial",
        "importPath": "msp",
        "description": "msp",
        "isExtraImport": true,
        "detail": "msp",
        "documentation": {}
    },
    {
        "label": "MSP_RX",
        "importPath": "msp",
        "description": "msp",
        "isExtraImport": true,
        "detail": "msp",
        "documentation": {}
    },
    {
        "label": "MSP_Packet",
        "importPath": "msp",
        "description": "msp",
        "isExtraImport": true,
        "detail": "msp",
        "documentation": {}
    },
    {
        "label": "MSP_Command",
        "importPath": "msp",
        "description": "msp",
        "isExtraImport": true,
        "detail": "msp",
        "documentation": {}
    },
    {
        "label": "list_ports",
        "importPath": "serial.tools",
        "description": "serial.tools",
        "isExtraImport": true,
        "detail": "serial.tools",
        "documentation": {}
    },
    {
        "label": "ScrollableWidget",
        "kind": 6,
        "importPath": "tools.client.gui",
        "description": "tools.client.gui",
        "peekOfCode": "class ScrollableWidget(QScrollArea):\n    def __init__(self):\n        super().__init__()\n        self._widget = QWidget()\n        layout = QGridLayout(self._widget)\n        layout.setAlignment(Qt.AlignmentFlag.AlignTop)\n        self.setWidget(self._widget)\n        self.setWidgetResizable(True)\nclass Settings(ScrollableWidget):\n    def __init__(self) -> None:",
        "detail": "tools.client.gui",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "tools.client.gui",
        "description": "tools.client.gui",
        "peekOfCode": "class Settings(ScrollableWidget):\n    def __init__(self) -> None:\n        super().__init__()\nclass Gui(QMainWindow):\n    def __init__(self) -> None:\n        super().__init__()\n        # Attributes\n        self._params: Dict[str, QLabel] = {}\n        self._log_blocks = Queue()\n        self._telem_client = TelemetryClient(DEFAULT_IP, DEFAULT_PORT,",
        "detail": "tools.client.gui",
        "documentation": {}
    },
    {
        "label": "Gui",
        "kind": 6,
        "importPath": "tools.client.gui",
        "description": "tools.client.gui",
        "peekOfCode": "class Gui(QMainWindow):\n    def __init__(self) -> None:\n        super().__init__()\n        # Attributes\n        self._params: Dict[str, QLabel] = {}\n        self._log_blocks = Queue()\n        self._telem_client = TelemetryClient(DEFAULT_IP, DEFAULT_PORT,\n                                             self._log_blocks.put)\n        self._wanted_params = [\n            'raw_gyro_x',",
        "detail": "tools.client.gui",
        "documentation": {}
    },
    {
        "label": "DEFAULT_IP",
        "kind": 5,
        "importPath": "tools.client.gui",
        "description": "tools.client.gui",
        "peekOfCode": "DEFAULT_IP = '192.168.4.1'\n#DEFAULT_IP = '192.168.10.205'\nDEFAULT_PORT = 80\nclass ScrollableWidget(QScrollArea):\n    def __init__(self):\n        super().__init__()\n        self._widget = QWidget()\n        layout = QGridLayout(self._widget)\n        layout.setAlignment(Qt.AlignmentFlag.AlignTop)\n        self.setWidget(self._widget)",
        "detail": "tools.client.gui",
        "documentation": {}
    },
    {
        "label": "#DEFAULT_IP",
        "kind": 5,
        "importPath": "tools.client.gui",
        "description": "tools.client.gui",
        "peekOfCode": "#DEFAULT_IP = '192.168.10.205'\nDEFAULT_PORT = 80\nclass ScrollableWidget(QScrollArea):\n    def __init__(self):\n        super().__init__()\n        self._widget = QWidget()\n        layout = QGridLayout(self._widget)\n        layout.setAlignment(Qt.AlignmentFlag.AlignTop)\n        self.setWidget(self._widget)\n        self.setWidgetResizable(True)",
        "detail": "tools.client.gui",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PORT",
        "kind": 5,
        "importPath": "tools.client.gui",
        "description": "tools.client.gui",
        "peekOfCode": "DEFAULT_PORT = 80\nclass ScrollableWidget(QScrollArea):\n    def __init__(self):\n        super().__init__()\n        self._widget = QWidget()\n        layout = QGridLayout(self._widget)\n        layout.setAlignment(Qt.AlignmentFlag.AlignTop)\n        self.setWidget(self._widget)\n        self.setWidgetResizable(True)\nclass Settings(ScrollableWidget):",
        "detail": "tools.client.gui",
        "documentation": {}
    },
    {
        "label": "ScrollableWidget",
        "kind": 6,
        "importPath": "tools.gui.gui",
        "description": "tools.gui.gui",
        "peekOfCode": "class ScrollableWidget(QScrollArea):\n    def __init__(self):\n        super().__init__()\n        self._widget = QWidget()\n        layout = QGridLayout(self._widget)\n        layout.setAlignment(Qt.AlignmentFlag.AlignTop)\n        self.setWidget(self._widget)\n        self.setWidgetResizable(True)\nclass Gui(QMainWindow):\n    def __init__(self) -> None:",
        "detail": "tools.gui.gui",
        "documentation": {}
    },
    {
        "label": "Gui",
        "kind": 6,
        "importPath": "tools.gui.gui",
        "description": "tools.gui.gui",
        "peekOfCode": "class Gui(QMainWindow):\n    def __init__(self) -> None:\n        super().__init__()\n        # Attributes\n        self._params: Dict[str, QLabel] = {}\n        self._log_blocks = Queue()\n        self._telem_client = TelemetryClient(DEFAULT_IP, DEFAULT_PORT,\n                                             self._log_blocks.put)\n        self._wanted_params = [\n            'raw_gyro_x',",
        "detail": "tools.gui.gui",
        "documentation": {}
    },
    {
        "label": "DEFAULT_IP",
        "kind": 5,
        "importPath": "tools.gui.gui",
        "description": "tools.gui.gui",
        "peekOfCode": "DEFAULT_IP = '192.168.4.1'\n#DEFAULT_IP = '192.168.10.205'\nDEFAULT_PORT = 80\nclass ScrollableWidget(QScrollArea):\n    def __init__(self):\n        super().__init__()\n        self._widget = QWidget()\n        layout = QGridLayout(self._widget)\n        layout.setAlignment(Qt.AlignmentFlag.AlignTop)\n        self.setWidget(self._widget)",
        "detail": "tools.gui.gui",
        "documentation": {}
    },
    {
        "label": "#DEFAULT_IP",
        "kind": 5,
        "importPath": "tools.gui.gui",
        "description": "tools.gui.gui",
        "peekOfCode": "#DEFAULT_IP = '192.168.10.205'\nDEFAULT_PORT = 80\nclass ScrollableWidget(QScrollArea):\n    def __init__(self):\n        super().__init__()\n        self._widget = QWidget()\n        layout = QGridLayout(self._widget)\n        layout.setAlignment(Qt.AlignmentFlag.AlignTop)\n        self.setWidget(self._widget)\n        self.setWidgetResizable(True)",
        "detail": "tools.gui.gui",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PORT",
        "kind": 5,
        "importPath": "tools.gui.gui",
        "description": "tools.gui.gui",
        "peekOfCode": "DEFAULT_PORT = 80\nclass ScrollableWidget(QScrollArea):\n    def __init__(self):\n        super().__init__()\n        self._widget = QWidget()\n        layout = QGridLayout(self._widget)\n        layout.setAlignment(Qt.AlignmentFlag.AlignTop)\n        self.setWidget(self._widget)\n        self.setWidgetResizable(True)\nclass Gui(QMainWindow):",
        "detail": "tools.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_block_t",
        "kind": 6,
        "importPath": "tools.gui.log_types",
        "description": "tools.gui.log_types",
        "peekOfCode": "class log_block_t:\n    pass\nclass log_type_t(IntEnum):\n    LOG_TYPE_PID = 0\n    LOG_TYPE_BATTERY = 1\n@dataclass\nclass log_block_header_t(log_block_t):\n    type: float = 0 # log_type_t\n    timestamp: float = 0 # uint32_t\n    id: float = 0 # uint32_t",
        "detail": "tools.gui.log_types",
        "documentation": {}
    },
    {
        "label": "log_type_t",
        "kind": 6,
        "importPath": "tools.gui.log_types",
        "description": "tools.gui.log_types",
        "peekOfCode": "class log_type_t(IntEnum):\n    LOG_TYPE_PID = 0\n    LOG_TYPE_BATTERY = 1\n@dataclass\nclass log_block_header_t(log_block_t):\n    type: float = 0 # log_type_t\n    timestamp: float = 0 # uint32_t\n    id: float = 0 # uint32_t\n    fmt = '<BII'\n    size = struct.calcsize(fmt)",
        "detail": "tools.gui.log_types",
        "documentation": {}
    },
    {
        "label": "log_block_header_t",
        "kind": 6,
        "importPath": "tools.gui.log_types",
        "description": "tools.gui.log_types",
        "peekOfCode": "class log_block_header_t(log_block_t):\n    type: float = 0 # log_type_t\n    timestamp: float = 0 # uint32_t\n    id: float = 0 # uint32_t\n    fmt = '<BII'\n    size = struct.calcsize(fmt)\n    def to_bytes(self) -> bytes:\n        \"\"\" Returns a log_block_header_t in bytes. \"\"\"\n        fmt = self.fmt\n        raw = struct.pack(fmt, *[getattr(self, f.name) for f in fields(self)])",
        "detail": "tools.gui.log_types",
        "documentation": {}
    },
    {
        "label": "log_block_data_control_loop_t",
        "kind": 6,
        "importPath": "tools.gui.log_types",
        "description": "tools.gui.log_types",
        "peekOfCode": "class log_block_data_control_loop_t(log_block_header_t):\n    raw_gyro_x: float = 0 # float\n    raw_gyro_y: float = 0 # float\n    raw_gyro_z: float = 0 # float\n    filtered_gyro_x: float = 0 # float\n    filtered_gyro_y: float = 0 # float\n    filtered_gyro_z: float = 0 # float\n    rc_in_roll: float = 0 # uint16_t\n    rc_in_pitch: float = 0 # uint16_t\n    rc_in_yaw: float = 0 # uint16_t",
        "detail": "tools.gui.log_types",
        "documentation": {}
    },
    {
        "label": "log_block_data_battery_t",
        "kind": 6,
        "importPath": "tools.gui.log_types",
        "description": "tools.gui.log_types",
        "peekOfCode": "class log_block_data_battery_t(log_block_header_t):\n    voltage: float = 0 # float\n    fmt = '<f'\n    size = struct.calcsize(fmt)\n    def to_bytes(self) -> bytes:\n        \"\"\" Returns a log_block_data_battery_t in bytes. \"\"\"\n        fmt = self.fmt\n        fmt = super().fmt + fmt.replace(\"<\", \"\")\n        raw = struct.pack(fmt, *[getattr(self, f.name) for f in fields(self)])\n        return raw",
        "detail": "tools.gui.log_types",
        "documentation": {}
    },
    {
        "label": "TelemetryClient",
        "kind": 6,
        "importPath": "tools.gui.telemetry_client",
        "description": "tools.gui.telemetry_client",
        "peekOfCode": "class TelemetryClient:\n    '''\n    Client that connects to the telemetry node and read data from it.\n    Once new data is received, it is parsed and log blocks python objects\n    are assembled. Once these are assembled, they are put in a rx queue, which\n    can be taken from by the HTTP server.\n    '''\n    class ParseState(IntEnum):\n        HEADER = 0\n        DATA = 1",
        "detail": "tools.gui.telemetry_client",
        "documentation": {}
    },
    {
        "label": "gen_random_log_block",
        "kind": 2,
        "importPath": "tools.gui.telemetry_client",
        "description": "tools.gui.telemetry_client",
        "peekOfCode": "def gen_random_log_block() -> List[log_type_t]:\n    return log_block_data_control_loop_t(LOG_TYPE_PID, int(time.time()), log_id)\nclass TelemetryClient:\n    '''\n    Client that connects to the telemetry node and read data from it.\n    Once new data is received, it is parsed and log blocks python objects\n    are assembled. Once these are assembled, they are put in a rx queue, which\n    can be taken from by the HTTP server.\n    '''\n    class ParseState(IntEnum):",
        "detail": "tools.gui.telemetry_client",
        "documentation": {}
    },
    {
        "label": "LOG_TYPE_PID",
        "kind": 5,
        "importPath": "tools.gui.telemetry_client",
        "description": "tools.gui.telemetry_client",
        "peekOfCode": "LOG_TYPE_PID = 0\nlog_id = 0\ndef gen_random_log_block() -> List[log_type_t]:\n    return log_block_data_control_loop_t(LOG_TYPE_PID, int(time.time()), log_id)\nclass TelemetryClient:\n    '''\n    Client that connects to the telemetry node and read data from it.\n    Once new data is received, it is parsed and log blocks python objects\n    are assembled. Once these are assembled, they are put in a rx queue, which\n    can be taken from by the HTTP server.",
        "detail": "tools.gui.telemetry_client",
        "documentation": {}
    },
    {
        "label": "log_id",
        "kind": 5,
        "importPath": "tools.gui.telemetry_client",
        "description": "tools.gui.telemetry_client",
        "peekOfCode": "log_id = 0\ndef gen_random_log_block() -> List[log_type_t]:\n    return log_block_data_control_loop_t(LOG_TYPE_PID, int(time.time()), log_id)\nclass TelemetryClient:\n    '''\n    Client that connects to the telemetry node and read data from it.\n    Once new data is received, it is parsed and log blocks python objects\n    are assembled. Once these are assembled, they are put in a rx queue, which\n    can be taken from by the HTTP server.\n    '''",
        "detail": "tools.gui.telemetry_client",
        "documentation": {}
    },
    {
        "label": "TelemetryClientLogger",
        "kind": 6,
        "importPath": "tools.gui.telemetry_client_logger",
        "description": "tools.gui.telemetry_client_logger",
        "peekOfCode": "class TelemetryClientLogger:\n    def log(self, log_block: log_block_data_control_loop_t) -> None:\n        print(f'[{log_block.id}] ', end='')\n        for param in DESIRED_LOG_PARAMS:\n            value = getattr(log_block, param)\n            value_fmt = '{:+0.3f}'.format(value)\n            print(f'{param}: {value_fmt}', end=' ')\n        print()",
        "detail": "tools.gui.telemetry_client_logger",
        "documentation": {}
    },
    {
        "label": "DESIRED_LOG_PARAMS",
        "kind": 5,
        "importPath": "tools.gui.telemetry_client_logger",
        "description": "tools.gui.telemetry_client_logger",
        "peekOfCode": "DESIRED_LOG_PARAMS = [\n    'roll_error',\n    'roll_error_integral',\n    'roll_p',\n    'roll_i',\n    'roll_d',\n    'roll_pid',\n    #'raw_gyro_x',\n    #'raw_gyro_y',\n    #'raw_gyro_z',",
        "detail": "tools.gui.telemetry_client_logger",
        "documentation": {}
    },
    {
        "label": "DESIRED_LOG_PARAMS2",
        "kind": 5,
        "importPath": "tools.gui.telemetry_client_logger",
        "description": "tools.gui.telemetry_client_logger",
        "peekOfCode": "DESIRED_LOG_PARAMS2 = [\n    'rc_in_roll',\n    'rc_in_pitch',\n    'rc_in_yaw',\n    'rc_in_throttle',\n]\nclass TelemetryClientLogger:\n    def log(self, log_block: log_block_data_control_loop_t) -> None:\n        print(f'[{log_block.id}] ', end='')\n        for param in DESIRED_LOG_PARAMS:",
        "detail": "tools.gui.telemetry_client_logger",
        "documentation": {}
    },
    {
        "label": "Param",
        "kind": 6,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "class Param:\n    name: str\n@dataclass\nclass StructParam(Param):\n    type: str\n@dataclass\nclass EnumParam(Param):\n    value: str\n@dataclass\nclass Typedef:",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "StructParam",
        "kind": 6,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "class StructParam(Param):\n    type: str\n@dataclass\nclass EnumParam(Param):\n    value: str\n@dataclass\nclass Typedef:\n    type: str\n    name: str\n    params: List[Param]",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "EnumParam",
        "kind": 6,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "class EnumParam(Param):\n    value: str\n@dataclass\nclass Typedef:\n    type: str\n    name: str\n    params: List[Param]\ndef find_all_typedefs(c_code: str) -> None:\n    typedefs = []\n    current_typedef = None",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "Typedef",
        "kind": 6,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "class Typedef:\n    type: str\n    name: str\n    params: List[Param]\ndef find_all_typedefs(c_code: str) -> None:\n    typedefs = []\n    current_typedef = None\n    current_params = []\n    prev_line = ''\n    for i, line in enumerate(c_code.splitlines()):",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "find_all_typedefs",
        "kind": 2,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "def find_all_typedefs(c_code: str) -> None:\n    typedefs = []\n    current_typedef = None\n    current_params = []\n    prev_line = ''\n    for i, line in enumerate(c_code.splitlines()):\n        line = line.strip()\n        line = re.sub('\\s+', ' ', line)\n        if not line or line.startswith('//') or line.startswith('{'):\n            continue",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 2,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "def now() -> str:\n    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')\ndef write_js_output(typedefs: List[Typedef], output_path: Path) -> None:\n    header = AUTO_GENERATED_FILE_COMMENT.format(now())\n    output = f'/*\\n{header}*/\\n\\n'\n    for typedef in typedefs:\n        if typedef.name == 'log_block_data_control_loop_t':\n            name = 'AVAILABLE_LOG_TYPES'\n            output += f'const {name} = [\\n'\n            for param in typedef.params:",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "write_js_output",
        "kind": 2,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "def write_js_output(typedefs: List[Typedef], output_path: Path) -> None:\n    header = AUTO_GENERATED_FILE_COMMENT.format(now())\n    output = f'/*\\n{header}*/\\n\\n'\n    for typedef in typedefs:\n        if typedef.name == 'log_block_data_control_loop_t':\n            name = 'AVAILABLE_LOG_TYPES'\n            output += f'const {name} = [\\n'\n            for param in typedef.params:\n                output += '    {name: \"%s\", type: \"%s\"},\\n' % (param.name, param.type)\n            output = output[:-2] # Remove last comma",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "write_python_output",
        "kind": 2,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "def write_python_output(typedefs: List[Typedef], output_path: Path) -> None:\n    header = AUTO_GENERATED_FILE_COMMENT.format(now())\n    output = f'\"\"\"\\n{header}\"\"\"\\n\\n'\n    output = 'from dataclasses import dataclass, fields\\n'\n    output += 'import struct\\n'\n    output += 'from enum import IntEnum\\n\\n'\n    output += '@dataclass\\n'\n    output += 'class log_block_t:\\n'\n    output += '    pass\\n\\n'\n    def format_struct(typedef: Typedef, parent: str = None) -> str:",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "PROJECT_BASE_DIR = Path(__file__).absolute().parent.parent\nINCLUDE_DIR = PROJECT_BASE_DIR.joinpath('include')\nJS_TARGET_DIR = PROJECT_BASE_DIR.joinpath('tools', 'grapher-frontend', 'src')\n#PYTHON_TARGET_DIR = PROJECT_BASE_DIR.parent.joinpath('telemetry-node', 'tools', 'client')\nPYTHON_TARGET_DIR = PROJECT_BASE_DIR.joinpath('tools', 'gui')\nJS_TARGET_FILE = 'LogTypes.js'\nPYTHON_TARGET_FILE = 'log_types.py'\nJS_TARGET_FILEPATH = JS_TARGET_DIR.joinpath(JS_TARGET_FILE)\nPYTHON_TARGET_FILEPATH = PYTHON_TARGET_DIR.joinpath(PYTHON_TARGET_FILE)\nLOG_HEADER_FILE = 'log.h'",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "INCLUDE_DIR",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "INCLUDE_DIR = PROJECT_BASE_DIR.joinpath('include')\nJS_TARGET_DIR = PROJECT_BASE_DIR.joinpath('tools', 'grapher-frontend', 'src')\n#PYTHON_TARGET_DIR = PROJECT_BASE_DIR.parent.joinpath('telemetry-node', 'tools', 'client')\nPYTHON_TARGET_DIR = PROJECT_BASE_DIR.joinpath('tools', 'gui')\nJS_TARGET_FILE = 'LogTypes.js'\nPYTHON_TARGET_FILE = 'log_types.py'\nJS_TARGET_FILEPATH = JS_TARGET_DIR.joinpath(JS_TARGET_FILE)\nPYTHON_TARGET_FILEPATH = PYTHON_TARGET_DIR.joinpath(PYTHON_TARGET_FILE)\nLOG_HEADER_FILE = 'log.h'\nLOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "JS_TARGET_DIR",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "JS_TARGET_DIR = PROJECT_BASE_DIR.joinpath('tools', 'grapher-frontend', 'src')\n#PYTHON_TARGET_DIR = PROJECT_BASE_DIR.parent.joinpath('telemetry-node', 'tools', 'client')\nPYTHON_TARGET_DIR = PROJECT_BASE_DIR.joinpath('tools', 'gui')\nJS_TARGET_FILE = 'LogTypes.js'\nPYTHON_TARGET_FILE = 'log_types.py'\nJS_TARGET_FILEPATH = JS_TARGET_DIR.joinpath(JS_TARGET_FILE)\nPYTHON_TARGET_FILEPATH = PYTHON_TARGET_DIR.joinpath(PYTHON_TARGET_FILE)\nLOG_HEADER_FILE = 'log.h'\nLOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)\nLOG_TYPEDEF_NAME = 'log_block_control_loop_t'",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "#PYTHON_TARGET_DIR",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "#PYTHON_TARGET_DIR = PROJECT_BASE_DIR.parent.joinpath('telemetry-node', 'tools', 'client')\nPYTHON_TARGET_DIR = PROJECT_BASE_DIR.joinpath('tools', 'gui')\nJS_TARGET_FILE = 'LogTypes.js'\nPYTHON_TARGET_FILE = 'log_types.py'\nJS_TARGET_FILEPATH = JS_TARGET_DIR.joinpath(JS_TARGET_FILE)\nPYTHON_TARGET_FILEPATH = PYTHON_TARGET_DIR.joinpath(PYTHON_TARGET_FILE)\nLOG_HEADER_FILE = 'log.h'\nLOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)\nLOG_TYPEDEF_NAME = 'log_block_control_loop_t'\nAUTO_GENERATED_FILE_COMMENT = '''\\",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "PYTHON_TARGET_DIR",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "PYTHON_TARGET_DIR = PROJECT_BASE_DIR.joinpath('tools', 'gui')\nJS_TARGET_FILE = 'LogTypes.js'\nPYTHON_TARGET_FILE = 'log_types.py'\nJS_TARGET_FILEPATH = JS_TARGET_DIR.joinpath(JS_TARGET_FILE)\nPYTHON_TARGET_FILEPATH = PYTHON_TARGET_DIR.joinpath(PYTHON_TARGET_FILE)\nLOG_HEADER_FILE = 'log.h'\nLOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)\nLOG_TYPEDEF_NAME = 'log_block_control_loop_t'\nAUTO_GENERATED_FILE_COMMENT = '''\\\nAuto-generated file. Please don\\'t modify directly!",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "JS_TARGET_FILE",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "JS_TARGET_FILE = 'LogTypes.js'\nPYTHON_TARGET_FILE = 'log_types.py'\nJS_TARGET_FILEPATH = JS_TARGET_DIR.joinpath(JS_TARGET_FILE)\nPYTHON_TARGET_FILEPATH = PYTHON_TARGET_DIR.joinpath(PYTHON_TARGET_FILE)\nLOG_HEADER_FILE = 'log.h'\nLOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)\nLOG_TYPEDEF_NAME = 'log_block_control_loop_t'\nAUTO_GENERATED_FILE_COMMENT = '''\\\nAuto-generated file. Please don\\'t modify directly!\nGenerated: {}",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "PYTHON_TARGET_FILE",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "PYTHON_TARGET_FILE = 'log_types.py'\nJS_TARGET_FILEPATH = JS_TARGET_DIR.joinpath(JS_TARGET_FILE)\nPYTHON_TARGET_FILEPATH = PYTHON_TARGET_DIR.joinpath(PYTHON_TARGET_FILE)\nLOG_HEADER_FILE = 'log.h'\nLOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)\nLOG_TYPEDEF_NAME = 'log_block_control_loop_t'\nAUTO_GENERATED_FILE_COMMENT = '''\\\nAuto-generated file. Please don\\'t modify directly!\nGenerated: {}\n'''",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "JS_TARGET_FILEPATH",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "JS_TARGET_FILEPATH = JS_TARGET_DIR.joinpath(JS_TARGET_FILE)\nPYTHON_TARGET_FILEPATH = PYTHON_TARGET_DIR.joinpath(PYTHON_TARGET_FILE)\nLOG_HEADER_FILE = 'log.h'\nLOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)\nLOG_TYPEDEF_NAME = 'log_block_control_loop_t'\nAUTO_GENERATED_FILE_COMMENT = '''\\\nAuto-generated file. Please don\\'t modify directly!\nGenerated: {}\n'''\nC_TYPE_FORMATS = {",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "PYTHON_TARGET_FILEPATH",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "PYTHON_TARGET_FILEPATH = PYTHON_TARGET_DIR.joinpath(PYTHON_TARGET_FILE)\nLOG_HEADER_FILE = 'log.h'\nLOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)\nLOG_TYPEDEF_NAME = 'log_block_control_loop_t'\nAUTO_GENERATED_FILE_COMMENT = '''\\\nAuto-generated file. Please don\\'t modify directly!\nGenerated: {}\n'''\nC_TYPE_FORMATS = {\n    'log_type_t': 'B',",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "LOG_HEADER_FILE",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "LOG_HEADER_FILE = 'log.h'\nLOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)\nLOG_TYPEDEF_NAME = 'log_block_control_loop_t'\nAUTO_GENERATED_FILE_COMMENT = '''\\\nAuto-generated file. Please don\\'t modify directly!\nGenerated: {}\n'''\nC_TYPE_FORMATS = {\n    'log_type_t': 'B',\n    'uint8_t': 'B',",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "LOG_HEADER_PATH",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "LOG_HEADER_PATH = INCLUDE_DIR.joinpath(LOG_HEADER_FILE)\nLOG_TYPEDEF_NAME = 'log_block_control_loop_t'\nAUTO_GENERATED_FILE_COMMENT = '''\\\nAuto-generated file. Please don\\'t modify directly!\nGenerated: {}\n'''\nC_TYPE_FORMATS = {\n    'log_type_t': 'B',\n    'uint8_t': 'B',\n    'bool': '?',",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "LOG_TYPEDEF_NAME",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "LOG_TYPEDEF_NAME = 'log_block_control_loop_t'\nAUTO_GENERATED_FILE_COMMENT = '''\\\nAuto-generated file. Please don\\'t modify directly!\nGenerated: {}\n'''\nC_TYPE_FORMATS = {\n    'log_type_t': 'B',\n    'uint8_t': 'B',\n    'bool': '?',\n    'uint16_t': 'H',",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "AUTO_GENERATED_FILE_COMMENT",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "AUTO_GENERATED_FILE_COMMENT = '''\\\nAuto-generated file. Please don\\'t modify directly!\nGenerated: {}\n'''\nC_TYPE_FORMATS = {\n    'log_type_t': 'B',\n    'uint8_t': 'B',\n    'bool': '?',\n    'uint16_t': 'H',\n    'uint32_t': 'I',",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "C_TYPE_FORMATS",
        "kind": 5,
        "importPath": "tools.gen_log_params",
        "description": "tools.gen_log_params",
        "peekOfCode": "C_TYPE_FORMATS = {\n    'log_type_t': 'B',\n    'uint8_t': 'B',\n    'bool': '?',\n    'uint16_t': 'H',\n    'uint32_t': 'I',\n    'uint64_t': 'Q',\n    'int': 'i',\n    'float': 'f',\n}",
        "detail": "tools.gen_log_params",
        "documentation": {}
    },
    {
        "label": "MemParam",
        "kind": 6,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "class MemParam:\n    name: str\n    dtype: str\n    initial_value: str\n    address: int\n    type: str # [Measurement, Calibration]\n    line_number: int\n    source_file: str\n    children: List[str]\ndef parse_param_from_string(string: str, type: str) -> MemParam:",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "ParamTypeDef",
        "kind": 6,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "class ParamTypeDef:\n    pass\ndef is_primitive_type(param_type: str) -> bool:\n    return param_type in PARAM_TYPES\ndef find_param_typedef_in_sourcefiles(source_files: List[str], param_type: str) -> ParamTypeDef:\n    for src_file in source_files:\n        with open(src_file) as f:\n            src_code = f.read()\n            print('typedef\\s+struct\\s*\\{(.*?)}(.*?)%s' % param_type)\n            #m = re.search('typedef\\s+struct\\s*\\{(.*?)}(.*?)%s' % param_type, src_code, flags=re.DOTALL)",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "parse_param_from_string",
        "kind": 2,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "def parse_param_from_string(string: str, type: str) -> MemParam:\n    string = re.sub('\\s+', ' ', string)\n    split = string.split(' ')\n    dtype = split[0]\n    name = split[1]\n    if split[2] == '=':\n        initial_value = split[3]\n    else:\n        initial_value = None\n    return MemParam(name, dtype, initial_value, 0, type, 0, '', [])",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "get_param_strings_from_file",
        "kind": 2,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "def get_param_strings_from_file(filepath: Path) -> List[MemParam]:\n    with open(filepath) as f:\n        data = f.read()\n    params = []\n    def get_param_with_regex(line: str, regex: str) -> MemParam:\n        # Search for measurement parameters\n        match = re.search(f'(.*)@{regex}', line)\n        if match:\n            decl = match.group(1).split(';')[0]\n            param = parse_param_from_string(decl, regex)",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "lookup_memory_addresses",
        "kind": 2,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "def lookup_memory_addresses(mem_params: List[MemParam]) -> List[MemParam]:\n    for mem_param in mem_params:\n        addr = re.search(f'0x(.*)\\s*{mem_param.name}', map_data)\n        if addr:\n            addr = int(addr.group(1), 16)\n            mem_param.address = addr\n    return mem_params\ndef parse_args() -> Namespace:\n    parser = ArgumentParser()\n    parser.add_argument('-m', '--map_file', type=str, required=True,",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "parse_args",
        "kind": 2,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "def parse_args() -> Namespace:\n    parser = ArgumentParser()\n    parser.add_argument('-m', '--map_file', type=str, required=True,\n                        help='Filepath to memory file')\n    parser.add_argument('-s', '--source_dir', type=str, required=True,\n                        help='Directory of where to search for source code')\n    parser.add_argument('-o', '--output', type=str, required=True,\n                        help='Output directory to write results to')\n    return parser.parse_args()\nmem_params: List[MemParam] = []",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "get_filepaths_to_search",
        "kind": 2,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "def get_filepaths_to_search(source_dirs: List[str]) -> List[Path]:\n    filepaths = []\n    for src in source_dirs:\n        for dirpath, dirnames, filenames in os.walk(src):\n            for filename in filenames:\n                abspath = Path(dirpath).joinpath(filename)\n                filepaths.append(abspath)\n    return filepaths\ndef calc_param_size(param: MemParam) -> int:\n    pass",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "calc_param_size",
        "kind": 2,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "def calc_param_size(param: MemParam) -> int:\n    pass\nPARAM_TYPES = {\n    'int': 4,\n    'float': 4\n}\n@dataclass\nclass ParamTypeDef:\n    pass\ndef is_primitive_type(param_type: str) -> bool:",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "is_primitive_type",
        "kind": 2,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "def is_primitive_type(param_type: str) -> bool:\n    return param_type in PARAM_TYPES\ndef find_param_typedef_in_sourcefiles(source_files: List[str], param_type: str) -> ParamTypeDef:\n    for src_file in source_files:\n        with open(src_file) as f:\n            src_code = f.read()\n            print('typedef\\s+struct\\s*\\{(.*?)}(.*?)%s' % param_type)\n            #m = re.search('typedef\\s+struct\\s*\\{(.*?)}(.*?)%s' % param_type, src_code, flags=re.DOTALL)\n            #if m:\n            #    print('HIT', m.group())",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "find_param_typedef_in_sourcefiles",
        "kind": 2,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "def find_param_typedef_in_sourcefiles(source_files: List[str], param_type: str) -> ParamTypeDef:\n    for src_file in source_files:\n        with open(src_file) as f:\n            src_code = f.read()\n            print('typedef\\s+struct\\s*\\{(.*?)}(.*?)%s' % param_type)\n            #m = re.search('typedef\\s+struct\\s*\\{(.*?)}(.*?)%s' % param_type, src_code, flags=re.DOTALL)\n            #if m:\n            #    print('HIT', m.group())\ndef build_param_children(filepaths: List[str], param: MemParam) -> int:\n    if is_primitive_type(param.dtype):",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "build_param_children",
        "kind": 2,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "def build_param_children(filepaths: List[str], param: MemParam) -> int:\n    if is_primitive_type(param.dtype):\n        return\n    find_param_typedef_in_sourcefiles(filepaths, param.dtype)\nif __name__ == '__main__':\n    args = parse_args()\n    logging.basicConfig(level=logging.DEBUG)\n    source_dirs = args.source_dir.split(' ')\n    filepaths = get_filepaths_to_search(source_dirs)\n    print(f'Found {len(filepaths)} files to search')",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "logger = logging.getLogger(__name__)\nFILE_EXTENSIONS_TO_SEARCH = [\n    '.h',\n    '.c'\n]\nMEASUREMENT = 'meas'\nCALIBRATION = 'cal'\n@dataclass\nclass MemParam:\n    name: str",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "FILE_EXTENSIONS_TO_SEARCH",
        "kind": 5,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "FILE_EXTENSIONS_TO_SEARCH = [\n    '.h',\n    '.c'\n]\nMEASUREMENT = 'meas'\nCALIBRATION = 'cal'\n@dataclass\nclass MemParam:\n    name: str\n    dtype: str",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "MEASUREMENT",
        "kind": 5,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "MEASUREMENT = 'meas'\nCALIBRATION = 'cal'\n@dataclass\nclass MemParam:\n    name: str\n    dtype: str\n    initial_value: str\n    address: int\n    type: str # [Measurement, Calibration]\n    line_number: int",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "CALIBRATION",
        "kind": 5,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "CALIBRATION = 'cal'\n@dataclass\nclass MemParam:\n    name: str\n    dtype: str\n    initial_value: str\n    address: int\n    type: str # [Measurement, Calibration]\n    line_number: int\n    source_file: str",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "PARAM_TYPES",
        "kind": 5,
        "importPath": "tools.mem_addr",
        "description": "tools.mem_addr",
        "peekOfCode": "PARAM_TYPES = {\n    'int': 4,\n    'float': 4\n}\n@dataclass\nclass ParamTypeDef:\n    pass\ndef is_primitive_type(param_type: str) -> bool:\n    return param_type in PARAM_TYPES\ndef find_param_typedef_in_sourcefiles(source_files: List[str], param_type: str) -> ParamTypeDef:",
        "detail": "tools.mem_addr",
        "documentation": {}
    },
    {
        "label": "MSP_TX",
        "kind": 6,
        "importPath": "tools.msp",
        "description": "tools.msp",
        "peekOfCode": "class MSP_TX(ABC):\n    @abstractmethod\n    def send(self, data: bytes) -> None:\n        pass\n@dataclass\nclass MSP_Packet:\n    size: int = 0\n    command: int = 0\n    data: bytes = field(default_factory=bytearray)\n    crc: int = 0",
        "detail": "tools.msp",
        "documentation": {}
    },
    {
        "label": "MSP_Packet",
        "kind": 6,
        "importPath": "tools.msp",
        "description": "tools.msp",
        "peekOfCode": "class MSP_Packet:\n    size: int = 0\n    command: int = 0\n    data: bytes = field(default_factory=bytearray)\n    crc: int = 0\n    raw: bytearray = field(default_factory=bytearray)\nclass MSP_RX(ABC):\n    @abstractmethod\n    def receive_packet(self, packet: MSP_Packet) -> None:\n        pass",
        "detail": "tools.msp",
        "documentation": {}
    },
    {
        "label": "MSP_RX",
        "kind": 6,
        "importPath": "tools.msp",
        "description": "tools.msp",
        "peekOfCode": "class MSP_RX(ABC):\n    @abstractmethod\n    def receive_packet(self, packet: MSP_Packet) -> None:\n        pass\nclass MSP_Command(IntEnum):\n    MSP_API_VERSION \t  = 1\n    MSP_FC_VARIANT \t      = 2\n    MSP_FC_VERSION \t      = 3\n    MSP_BOARD_INFO        = 4\n    MSP_BUILD_INFO        = 5",
        "detail": "tools.msp",
        "documentation": {}
    },
    {
        "label": "MSP_Command",
        "kind": 6,
        "importPath": "tools.msp",
        "description": "tools.msp",
        "peekOfCode": "class MSP_Command(IntEnum):\n    MSP_API_VERSION \t  = 1\n    MSP_FC_VARIANT \t      = 2\n    MSP_FC_VERSION \t      = 3\n    MSP_BOARD_INFO        = 4\n    MSP_BUILD_INFO        = 5\n    MSP_IDENT             = 100\n    MSP_RAW_IMU           = 102\n    MSP_MOTOR             = 104\n    MSP_SET_MOTOR         = 214",
        "detail": "tools.msp",
        "documentation": {}
    },
    {
        "label": "MSP_StateMachine",
        "kind": 6,
        "importPath": "tools.msp",
        "description": "tools.msp",
        "peekOfCode": "class MSP_StateMachine:\n    def __init__(self, rx: MSP_RX) -> None:\n        self._malformed_packets = 0\n        self._rx = rx\n        self._bytes_read = 0\n        self._rx_buf = bytearray()\n        self._crc = 0\n        self._packet = MSP_Packet()\n    def process_byte(self, byte: int) -> None:\n        bytes_read = len(self._rx_buf)",
        "detail": "tools.msp",
        "documentation": {}
    },
    {
        "label": "MSP_Client",
        "kind": 6,
        "importPath": "tools.msp",
        "description": "tools.msp",
        "peekOfCode": "class MSP_Client(MSP_RX):\n    header = b'$M<'\n    read_timeout = 1\n    def __init__(self, callback: MSP_RX = None) -> None:\n        self._rx_packets = Queue()\n        self._is_running = Event()\n        self.msp_fsm = MSP_StateMachine(self)\n        self._rx_callback = callback\n    def receive_packet(self, packet: MSP_Packet) -> None:\n        print(f'RX: (len={len(packet.raw)}) {hex_string(packet.raw)}')",
        "detail": "tools.msp",
        "documentation": {}
    },
    {
        "label": "MSP_Client_Serial",
        "kind": 6,
        "importPath": "tools.msp",
        "description": "tools.msp",
        "peekOfCode": "class MSP_Client_Serial(MSP_Client):\n    def __init__(self, port: str, baudrate: int, callback: MSP_RX = None) -> None:\n        super().__init__(callback)\n        self.port = port\n        self.baudrate = baudrate\n        self._serial: Serial = None\n    def do_connect(self) -> None:\n        self._serial = Serial(self.port, self.baudrate, timeout=self.read_timeout)\n    def do_disconnect(self) -> None:\n        self._serial.close()",
        "detail": "tools.msp",
        "documentation": {}
    },
    {
        "label": "calculate_crc",
        "kind": 2,
        "importPath": "tools.msp",
        "description": "tools.msp",
        "peekOfCode": "def calculate_crc(data: bytes) -> int:\n    crc = 0\n    for byte in data:\n        crc ^= byte\n    return crc\ndef hex_string(data: bytes) -> str:\n    return ' '.join(hex(a)[2:].zfill(2) for a in data)\nclass MSP_StateMachine:\n    def __init__(self, rx: MSP_RX) -> None:\n        self._malformed_packets = 0",
        "detail": "tools.msp",
        "documentation": {}
    },
    {
        "label": "hex_string",
        "kind": 2,
        "importPath": "tools.msp",
        "description": "tools.msp",
        "peekOfCode": "def hex_string(data: bytes) -> str:\n    return ' '.join(hex(a)[2:].zfill(2) for a in data)\nclass MSP_StateMachine:\n    def __init__(self, rx: MSP_RX) -> None:\n        self._malformed_packets = 0\n        self._rx = rx\n        self._bytes_read = 0\n        self._rx_buf = bytearray()\n        self._crc = 0\n        self._packet = MSP_Packet()",
        "detail": "tools.msp",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "tools.msp_client",
        "description": "tools.msp_client",
        "peekOfCode": "class A(MSP_RX):\n    def receive_packet(self, packet: MSP_Packet) -> None:\n        print(packet)\nif __name__ == '__main__':\n    parser = ArgumentParser()\n    parser.add_argument('-p', '--port', type=str, default=None)\n    parser.add_argument('-b', '--baud', type=int, default=115200)\n    args = parser.parse_args()\n    if args.port is None:\n        available_ports = [port.device for port in list_ports.comports()]",
        "detail": "tools.msp_client",
        "documentation": {}
    },
    {
        "label": "HEADER_FIRST_BYTE",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "HEADER_FIRST_BYTE = 0\nHEADER_SECOND_BYTE = 1\nPAYLOAD = 2\nCHECKSUM_FIRST_BYTE = 3\nCHECKSUM_SECOND_BYTE = 4\nibus_state = HEADER_FIRST_BYTE\nparse_errors = 0\npayload = [0 for i in range(28)]\nbuf = []\ndata_bytes = 0",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "HEADER_SECOND_BYTE",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "HEADER_SECOND_BYTE = 1\nPAYLOAD = 2\nCHECKSUM_FIRST_BYTE = 3\nCHECKSUM_SECOND_BYTE = 4\nibus_state = HEADER_FIRST_BYTE\nparse_errors = 0\npayload = [0 for i in range(28)]\nbuf = []\ndata_bytes = 0\nrx_checksum: int",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "PAYLOAD = 2\nCHECKSUM_FIRST_BYTE = 3\nCHECKSUM_SECOND_BYTE = 4\nibus_state = HEADER_FIRST_BYTE\nparse_errors = 0\npayload = [0 for i in range(28)]\nbuf = []\ndata_bytes = 0\nrx_checksum: int\nchecksum: int",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "CHECKSUM_FIRST_BYTE",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "CHECKSUM_FIRST_BYTE = 3\nCHECKSUM_SECOND_BYTE = 4\nibus_state = HEADER_FIRST_BYTE\nparse_errors = 0\npayload = [0 for i in range(28)]\nbuf = []\ndata_bytes = 0\nrx_checksum: int\nchecksum: int\npkt_rate = 0",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "CHECKSUM_SECOND_BYTE",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "CHECKSUM_SECOND_BYTE = 4\nibus_state = HEADER_FIRST_BYTE\nparse_errors = 0\npayload = [0 for i in range(28)]\nbuf = []\ndata_bytes = 0\nrx_checksum: int\nchecksum: int\npkt_rate = 0\npkt_cnt = 0",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "ibus_state",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "ibus_state = HEADER_FIRST_BYTE\nparse_errors = 0\npayload = [0 for i in range(28)]\nbuf = []\ndata_bytes = 0\nrx_checksum: int\nchecksum: int\npkt_rate = 0\npkt_cnt = 0\nt0 = 0",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "parse_errors",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "parse_errors = 0\npayload = [0 for i in range(28)]\nbuf = []\ndata_bytes = 0\nrx_checksum: int\nchecksum: int\npkt_rate = 0\npkt_cnt = 0\nt0 = 0\nj = 0",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "payload",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "payload = [0 for i in range(28)]\nbuf = []\ndata_bytes = 0\nrx_checksum: int\nchecksum: int\npkt_rate = 0\npkt_cnt = 0\nt0 = 0\nj = 0\nif __name__ == '__main__':",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "buf",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "buf = []\ndata_bytes = 0\nrx_checksum: int\nchecksum: int\npkt_rate = 0\npkt_cnt = 0\nt0 = 0\nj = 0\nif __name__ == '__main__':\n    try:",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "data_bytes",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "data_bytes = 0\nrx_checksum: int\nchecksum: int\npkt_rate = 0\npkt_cnt = 0\nt0 = 0\nj = 0\nif __name__ == '__main__':\n    try:\n        port = sys.argv[1]",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "pkt_rate",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "pkt_rate = 0\npkt_cnt = 0\nt0 = 0\nj = 0\nif __name__ == '__main__':\n    try:\n        port = sys.argv[1]\n    except Exception:\n        print('Supply serial port!')\n        sys.exit(0)",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "pkt_cnt",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "pkt_cnt = 0\nt0 = 0\nj = 0\nif __name__ == '__main__':\n    try:\n        port = sys.argv[1]\n    except Exception:\n        print('Supply serial port!')\n        sys.exit(0)\n    connected = False",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "t0",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "t0 = 0\nj = 0\nif __name__ == '__main__':\n    try:\n        port = sys.argv[1]\n    except Exception:\n        print('Supply serial port!')\n        sys.exit(0)\n    connected = False\n    while not connected:",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "tools.parse_ibus",
        "description": "tools.parse_ibus",
        "peekOfCode": "j = 0\nif __name__ == '__main__':\n    try:\n        port = sys.argv[1]\n    except Exception:\n        print('Supply serial port!')\n        sys.exit(0)\n    connected = False\n    while not connected:\n        try:",
        "detail": "tools.parse_ibus",
        "documentation": {}
    },
    {
        "label": "Gui",
        "kind": 6,
        "importPath": "tools.serial_plotter",
        "description": "tools.serial_plotter",
        "peekOfCode": "class Gui(QMainWindow):\n    def __init__(self) -> None:\n        super().__init__()\n        # -- Graph content -- #\n        self.graph = pg.PlotWidget()\n        self.setCentralWidget(self.graph)\n        self.graph.setBackground('w')\n        self.x = []\n        self.y = []\n        self.line = self.graph.plot(",
        "detail": "tools.serial_plotter",
        "documentation": {}
    },
    {
        "label": "Gui",
        "kind": 6,
        "importPath": "tools.test_rx_bw",
        "description": "tools.test_rx_bw",
        "peekOfCode": "class Gui(QMainWindow):\n    def __init__(self) -> None:\n        super().__init__()\n        # -- Graph content -- #\n        self.graph = pg.PlotWidget()\n        self.setCentralWidget(self.graph)\n        self.graph.setBackground('w')\n        self.x = []\n        self.y = []\n        self.line = self.graph.plot(",
        "detail": "tools.test_rx_bw",
        "documentation": {}
    }
]